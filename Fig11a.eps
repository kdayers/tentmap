%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Wednesday, October 20, 2021 5:08:53 PM EDT
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
400.000 0 l
400.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 390 390 rc
2 J
0 j
0.500000 w
0 J
1 j
q
0.647059 0.647059 0.647059 RG
Q
1.00000 w
2 J
0 j
0.500000 w
0 J
1 j
q
0.647059 0.647059 0.647059 RG
Q
1.00000 w
2 J
0 j
0 J
1 j
q
q
0.309804 0.309804 0.443137 RG
43.0000 0.929006 340.483 381.560 rc
newpath
44.0000 192.133 m
268.988 65.8895 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
q
0.309804 0.309804 0.443137 RG
43.0000 0.929006 340.483 381.560 rc
newpath
44.0000 192.133 m
81.3601 3.46420 l
81.8910 4.75186 l
156.238 380.206 l
156.496 381.489 l
231.458 2.92901 l
231.528 2.96057 l
268.988 192.133 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
q
3.00000 w
41.0000 -1.07099 344.483 385.560 rc
newpath
44.0000 192.133 m
50.9108 79.0574 l
51.0196 78.5139 l
64.3584 78.5139 l
65.2399 71.8437 l
69.3631 4.37936 l
70.2804 16.1640 l
78.3334 147.926 l
78.7513 154.260 l
209.239 154.260 l
209.288 153.946 l
217.831 14.1657 l
218.603 3.99960 l
222.957 75.2347 l
223.827 78.5139 l
381.483 78.5139 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
Q
q
2 J
0 j
q
0.500000 w
0 J
1 j
newpath
66.4988 192.133 m
66.4988 194.133 l
S
newpath
88.9977 192.133 m
88.9977 194.133 l
S
newpath
111.496 192.133 m
111.496 194.133 l
S
newpath
133.995 192.133 m
133.995 194.133 l
S
newpath
178.993 192.133 m
178.993 194.133 l
S
newpath
201.492 192.133 m
201.492 194.133 l
S
newpath
223.991 192.133 m
223.991 194.133 l
S
newpath
246.489 192.133 m
246.489 194.133 l
S
newpath
291.487 192.133 m
291.487 194.133 l
S
newpath
313.986 192.133 m
313.986 194.133 l
S
newpath
336.485 192.133 m
336.485 194.133 l
S
newpath
358.984 192.133 m
358.984 194.133 l
S
newpath
44.0000 192.133 m
381.483 192.133 l
S
Q
0.500000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
204 213 16 18 rc
newpath
210.781 220.921 m
211.031 221.192 211.224 221.463 211.359 221.734  c
211.453 221.921 211.604 222.416 211.812 223.218  c
212.500 222.187 l
212.687 221.937 212.911 221.697 213.171 221.468  c
213.432 221.239 213.661 221.083 213.859 221.000  c
213.984 220.947 214.119 220.921 214.265 220.921  c
214.494 220.921 214.674 220.981 214.804 221.101  c
214.934 221.221 215.000 221.369 215.000 221.546  c
215.000 221.744 214.963 221.880 214.890 221.953  c
214.744 222.078 214.578 222.140 214.390 222.140  c
214.276 222.140 214.156 222.119 214.031 222.078  c
213.791 221.994 213.630 221.953 213.546 221.953  c
213.421 221.953 213.270 222.026 213.093 222.171  c
212.770 222.442 212.385 222.963 211.937 223.734  c
212.578 226.421 l
212.682 226.838 212.768 227.085 212.835 227.164  c
212.903 227.242 212.968 227.281 213.031 227.281  c
213.145 227.281 213.276 227.224 213.421 227.109  c
213.703 226.869 213.947 226.557 214.156 226.171  c
214.421 226.312 l
214.099 226.927 213.682 227.437 213.171 227.843  c
212.890 228.072 212.651 228.187 212.453 228.187  c
212.161 228.187 211.927 228.020 211.750 227.687  c
211.645 227.489 211.421 226.614 211.078 225.062  c
210.265 226.479 209.614 227.390 209.125 227.796  c
208.802 228.057 208.494 228.187 208.203 228.187  c
207.984 228.187 207.791 228.109 207.625 227.953  c
207.500 227.838 207.437 227.687 207.437 227.500  c
207.437 227.322 207.494 227.177 207.609 227.062  c
207.724 226.947 207.864 226.890 208.031 226.890  c
208.197 226.890 208.375 226.974 208.562 227.140  c
208.697 227.265 208.802 227.328 208.875 227.328  c
208.937 227.328 209.020 227.286 209.125 227.203  c
209.364 227.005 209.695 226.578 210.117 225.921  c
210.539 225.265 210.817 224.791 210.953 224.500  c
210.630 223.229 210.453 222.557 210.421 222.484  c
210.307 222.151 210.153 221.914 209.960 221.773  c
209.768 221.632 209.484 221.562 209.109 221.562  c
208.984 221.562 208.843 221.567 208.687 221.578  c
208.687 221.296 l
210.781 220.921 l
h
f
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
44.0000 192.133 m
44.0000 196.133 l
S
Q
q
newpath
156.494 192.133 m
156.494 196.133 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
154.468 210.750 m
154.468 209.770 154.617 208.924 154.914 208.210  c
155.210 207.497 155.604 206.968 156.093 206.625  c
156.479 206.354 156.875 206.218 157.281 206.218  c
157.937 206.218 158.526 206.552 159.046 207.218  c
159.703 208.052 160.031 209.182 160.031 210.609  c
160.031 211.609 159.888 212.458 159.601 213.156  c
159.315 213.854 158.947 214.362 158.500 214.679  c
158.052 214.997 157.625 215.156 157.218 215.156  c
156.395 215.156 155.708 214.671 155.156 213.703  c
154.697 212.880 154.468 211.895 154.468 210.750  c
h
155.718 210.906 m
155.718 212.093 155.864 213.062 156.156 213.812  c
156.395 214.437 156.755 214.750 157.234 214.750  c
157.463 214.750 157.700 214.648 157.945 214.445  c
158.190 214.242 158.375 213.895 158.500 213.406  c
158.697 212.687 158.796 211.661 158.796 210.328  c
158.796 209.349 158.692 208.531 158.484 207.875  c
158.338 207.385 158.140 207.041 157.890 206.843  c
157.724 206.708 157.515 206.640 157.265 206.640  c
156.984 206.640 156.729 206.765 156.500 207.015  c
156.197 207.369 155.992 207.924 155.882 208.679  c
155.773 209.434 155.718 210.177 155.718 210.906  c
h
162.125 213.765 m
162.322 213.765 162.489 213.835 162.625 213.976  c
162.760 214.117 162.828 214.281 162.828 214.468  c
162.828 214.666 162.760 214.833 162.625 214.968  c
162.489 215.104 162.322 215.171 162.125 215.171  c
161.927 215.171 161.760 215.104 161.625 214.968  c
161.489 214.833 161.421 214.666 161.421 214.468  c
161.421 214.270 161.489 214.104 161.625 213.968  c
161.760 213.833 161.927 213.765 162.125 213.765  c
h
169.390 206.390 m
168.890 207.468 l
166.312 207.468 l
165.750 208.625 l
166.864 208.791 167.750 209.208 168.406 209.875  c
168.968 210.447 169.250 211.125 169.250 211.906  c
169.250 212.364 169.158 212.786 168.976 213.171  c
168.794 213.557 168.562 213.885 168.281 214.156  c
168.000 214.427 167.687 214.640 167.343 214.796  c
166.864 215.036 166.364 215.156 165.843 215.156  c
165.333 215.156 164.960 215.067 164.726 214.890  c
164.492 214.713 164.375 214.520 164.375 214.312  c
164.375 214.187 164.424 214.080 164.523 213.992  c
164.622 213.903 164.744 213.859 164.890 213.859  c
164.994 213.859 165.088 213.875 165.171 213.906  c
165.255 213.937 165.395 214.026 165.593 214.171  c
165.916 214.390 166.239 214.500 166.562 214.500  c
167.062 214.500 167.497 214.312 167.867 213.937  c
168.237 213.562 168.421 213.104 168.421 212.562  c
168.421 212.041 168.255 211.557 167.921 211.109  c
167.588 210.661 167.130 210.312 166.546 210.062  c
166.078 209.875 165.447 209.765 164.656 209.734  c
166.312 206.390 l
169.390 206.390 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
268.988 192.133 m
268.988 196.133 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
271.531 207.234 m
273.625 206.218 l
273.828 206.218 l
273.828 213.484 l
273.828 213.963 273.849 214.263 273.890 214.382  c
273.932 214.502 274.015 214.593 274.140 214.656  c
274.265 214.718 274.520 214.755 274.906 214.765  c
274.906 215.000 l
271.671 215.000 l
271.671 214.765 l
272.078 214.755 272.341 214.718 272.460 214.656  c
272.580 214.593 272.664 214.510 272.710 214.406  c
272.757 214.302 272.781 213.994 272.781 213.484  c
272.781 208.843 l
272.781 208.208 272.760 207.802 272.718 207.625  c
272.687 207.489 272.632 207.390 272.554 207.328  c
272.476 207.265 272.380 207.234 272.265 207.234  c
272.109 207.234 271.895 207.302 271.625 207.437  c
271.531 207.234 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
381.483 192.133 m
381.483 196.133 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
380.531 207.234 m
382.625 206.218 l
382.828 206.218 l
382.828 213.484 l
382.828 213.963 382.849 214.263 382.890 214.382  c
382.932 214.502 383.015 214.593 383.140 214.656  c
383.265 214.718 383.520 214.755 383.906 214.765  c
383.906 215.000 l
380.671 215.000 l
380.671 214.765 l
381.078 214.755 381.341 214.718 381.460 214.656  c
381.580 214.593 381.664 214.510 381.710 214.406  c
381.757 214.302 381.781 213.994 381.781 213.484  c
381.781 208.843 l
381.781 208.208 381.760 207.802 381.718 207.625  c
381.687 207.489 381.632 207.390 381.554 207.328  c
381.476 207.265 381.380 207.234 381.265 207.234  c
381.109 207.234 380.895 207.302 380.625 207.437  c
380.531 207.234 l
h
387.125 213.765 m
387.322 213.765 387.489 213.835 387.625 213.976  c
387.760 214.117 387.828 214.281 387.828 214.468  c
387.828 214.666 387.760 214.833 387.625 214.968  c
387.489 215.104 387.322 215.171 387.125 215.171  c
386.927 215.171 386.760 215.104 386.625 214.968  c
386.489 214.833 386.421 214.666 386.421 214.468  c
386.421 214.270 386.489 214.104 386.625 213.968  c
386.760 213.833 386.927 213.765 387.125 213.765  c
h
394.390 206.390 m
393.890 207.468 l
391.312 207.468 l
390.750 208.625 l
391.864 208.791 392.750 209.208 393.406 209.875  c
393.968 210.447 394.250 211.125 394.250 211.906  c
394.250 212.364 394.158 212.786 393.976 213.171  c
393.794 213.557 393.562 213.885 393.281 214.156  c
393.000 214.427 392.687 214.640 392.343 214.796  c
391.864 215.036 391.364 215.156 390.843 215.156  c
390.333 215.156 389.960 215.067 389.726 214.890  c
389.492 214.713 389.375 214.520 389.375 214.312  c
389.375 214.187 389.424 214.080 389.523 213.992  c
389.622 213.903 389.744 213.859 389.890 213.859  c
389.994 213.859 390.088 213.875 390.171 213.906  c
390.255 213.937 390.395 214.026 390.593 214.171  c
390.916 214.390 391.239 214.500 391.562 214.500  c
392.062 214.500 392.497 214.312 392.867 213.937  c
393.237 213.562 393.421 213.104 393.421 212.562  c
393.421 212.041 393.255 211.557 392.921 211.109  c
392.588 210.661 392.130 210.312 391.546 210.062  c
391.078 209.875 390.447 209.765 389.656 209.734  c
391.312 206.390 l
394.390 206.390 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
1.00000 w
2 J
0 j
q
0.500000 w
0 J
1 j
newpath
44.0000 15.3919 m
42.0000 15.3919 l
S
newpath
44.0000 28.0163 m
42.0000 28.0163 l
S
newpath
44.0000 40.6407 m
42.0000 40.6407 l
S
newpath
44.0000 53.2651 m
42.0000 53.2651 l
S
newpath
44.0000 78.5139 m
42.0000 78.5139 l
S
newpath
44.0000 91.1384 m
42.0000 91.1384 l
S
newpath
44.0000 103.762 m
42.0000 103.762 l
S
newpath
44.0000 116.387 m
42.0000 116.387 l
S
newpath
44.0000 141.636 m
42.0000 141.636 l
S
newpath
44.0000 154.260 m
42.0000 154.260 l
S
newpath
44.0000 166.884 m
42.0000 166.884 l
S
newpath
44.0000 179.509 m
42.0000 179.509 l
S
newpath
44.0000 204.758 m
42.0000 204.758 l
S
newpath
44.0000 217.382 m
42.0000 217.382 l
S
newpath
44.0000 230.007 m
42.0000 230.007 l
S
newpath
44.0000 242.631 m
42.0000 242.631 l
S
newpath
44.0000 280.504 m
42.0000 280.504 l
S
newpath
44.0000 267.880 m
42.0000 267.880 l
S
newpath
44.0000 293.129 m
42.0000 293.129 l
S
newpath
44.0000 305.753 m
42.0000 305.753 l
S
newpath
44.0000 331.002 m
42.0000 331.002 l
S
newpath
44.0000 343.626 m
42.0000 343.626 l
S
newpath
44.0000 356.251 m
42.0000 356.251 l
S
newpath
44.0000 368.875 m
42.0000 368.875 l
S
newpath
44.0000 381.489 m
44.0000 2.92901 l
S
Q
0.500000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
1 88 8 18 rc
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
44.0000 381.499 m
40.0000 381.499 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
18 380 7 13 rc
newpath
28.7968 387.437 m
20.2031 387.437 l
20.2031 386.765 l
28.7968 386.765 l
28.7968 387.437 l
h
f
Q
newpath
28.5312 383.234 m
30.6250 382.218 l
30.8281 382.218 l
30.8281 389.484 l
30.8281 389.963 30.8489 390.263 30.8906 390.382  c
30.9322 390.502 31.0156 390.593 31.1406 390.656  c
31.2656 390.718 31.5208 390.755 31.9062 390.765  c
31.9062 391.000 l
28.6718 391.000 l
28.6718 390.765 l
29.0781 390.755 29.3411 390.718 29.4609 390.656  c
29.5807 390.593 29.6640 390.510 29.7109 390.406  c
29.7578 390.302 29.7812 389.994 29.7812 389.484  c
29.7812 384.843 l
29.7812 384.208 29.7604 383.802 29.7187 383.625  c
29.6875 383.489 29.6328 383.390 29.5546 383.328  c
29.4765 383.265 29.3802 383.234 29.2656 383.234  c
29.1093 383.234 28.8958 383.302 28.6250 383.437  c
28.5312 383.234 l
h
35.1250 389.765 m
35.3229 389.765 35.4895 389.835 35.6250 389.976  c
35.7604 390.117 35.8281 390.281 35.8281 390.468  c
35.8281 390.666 35.7604 390.833 35.6250 390.968  c
35.4895 391.104 35.3229 391.171 35.1250 391.171  c
34.9270 391.171 34.7604 391.104 34.6250 390.968  c
34.4895 390.833 34.4218 390.666 34.4218 390.468  c
34.4218 390.270 34.4895 390.104 34.6250 389.968  c
34.7604 389.833 34.9270 389.765 35.1250 389.765  c
h
42.3906 382.390 m
41.8906 383.468 l
39.3125 383.468 l
38.7500 384.625 l
39.8645 384.791 40.7500 385.208 41.4062 385.875  c
41.9687 386.447 42.2500 387.125 42.2500 387.906  c
42.2500 388.364 42.1588 388.786 41.9765 389.171  c
41.7942 389.557 41.5625 389.885 41.2812 390.156  c
41.0000 390.427 40.6875 390.640 40.3437 390.796  c
39.8645 391.036 39.3645 391.156 38.8437 391.156  c
38.3333 391.156 37.9609 391.067 37.7265 390.890  c
37.4921 390.713 37.3750 390.520 37.3750 390.312  c
37.3750 390.187 37.4244 390.080 37.5234 389.992  c
37.6224 389.903 37.7447 389.859 37.8906 389.859  c
37.9947 389.859 38.0885 389.875 38.1718 389.906  c
38.2552 389.937 38.3958 390.026 38.5937 390.171  c
38.9166 390.390 39.2395 390.500 39.5625 390.500  c
40.0625 390.500 40.4974 390.312 40.8671 389.937  c
41.2369 389.562 41.4218 389.104 41.4218 388.562  c
41.4218 388.041 41.2552 387.557 40.9218 387.109  c
40.5885 386.661 40.1302 386.312 39.5468 386.062  c
39.0781 385.875 38.4479 385.765 37.6562 385.734  c
39.3125 382.390 l
42.3906 382.390 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
44.0000 318.377 m
40.0000 318.377 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
27 317 7 13 rc
newpath
37.7968 324.437 m
29.2031 324.437 l
29.2031 323.765 l
37.7968 323.765 l
37.7968 324.437 l
h
f
Q
newpath
37.5312 320.234 m
39.6250 319.218 l
39.8281 319.218 l
39.8281 326.484 l
39.8281 326.963 39.8489 327.263 39.8906 327.382  c
39.9322 327.502 40.0156 327.593 40.1406 327.656  c
40.2656 327.718 40.5208 327.755 40.9062 327.765  c
40.9062 328.000 l
37.6718 328.000 l
37.6718 327.765 l
38.0781 327.755 38.3411 327.718 38.4609 327.656  c
38.5807 327.593 38.6640 327.510 38.7109 327.406  c
38.7578 327.302 38.7812 326.994 38.7812 326.484  c
38.7812 321.843 l
38.7812 321.208 38.7604 320.802 38.7187 320.625  c
38.6875 320.489 38.6328 320.390 38.5546 320.328  c
38.4765 320.265 38.3802 320.234 38.2656 320.234  c
38.1093 320.234 37.8958 320.302 37.6250 320.437  c
37.5312 320.234 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
44.0000 255.255 m
40.0000 255.255 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
18 254 7 13 rc
newpath
28.7968 261.437 m
20.2031 261.437 l
20.2031 260.765 l
28.7968 260.765 l
28.7968 261.437 l
h
f
Q
newpath
27.4687 260.750 m
27.4687 259.770 27.6171 258.924 27.9140 258.210  c
28.2109 257.497 28.6041 256.968 29.0937 256.625  c
29.4791 256.354 29.8750 256.218 30.2812 256.218  c
30.9375 256.218 31.5260 256.552 32.0468 257.218  c
32.7031 258.052 33.0312 259.182 33.0312 260.609  c
33.0312 261.609 32.8880 262.458 32.6015 263.156  c
32.3151 263.854 31.9479 264.362 31.5000 264.679  c
31.0520 264.997 30.6250 265.156 30.2187 265.156  c
29.3958 265.156 28.7083 264.671 28.1562 263.703  c
27.6979 262.880 27.4687 261.895 27.4687 260.750  c
h
28.7187 260.906 m
28.7187 262.093 28.8645 263.062 29.1562 263.812  c
29.3958 264.437 29.7552 264.750 30.2343 264.750  c
30.4635 264.750 30.7005 264.648 30.9453 264.445  c
31.1901 264.242 31.3750 263.895 31.5000 263.406  c
31.6979 262.687 31.7968 261.661 31.7968 260.328  c
31.7968 259.349 31.6927 258.531 31.4843 257.875  c
31.3385 257.385 31.1406 257.041 30.8906 256.843  c
30.7239 256.708 30.5156 256.640 30.2656 256.640  c
29.9843 256.640 29.7291 256.765 29.5000 257.015  c
29.1979 257.369 28.9921 257.924 28.8828 258.679  c
28.7734 259.434 28.7187 260.177 28.7187 260.906  c
h
35.1250 263.765 m
35.3229 263.765 35.4895 263.835 35.6250 263.976  c
35.7604 264.117 35.8281 264.281 35.8281 264.468  c
35.8281 264.666 35.7604 264.833 35.6250 264.968  c
35.4895 265.104 35.3229 265.171 35.1250 265.171  c
34.9270 265.171 34.7604 265.104 34.6250 264.968  c
34.4895 264.833 34.4218 264.666 34.4218 264.468  c
34.4218 264.270 34.4895 264.104 34.6250 263.968  c
34.7604 263.833 34.9270 263.765 35.1250 263.765  c
h
42.3906 256.390 m
41.8906 257.468 l
39.3125 257.468 l
38.7500 258.625 l
39.8645 258.791 40.7500 259.208 41.4062 259.875  c
41.9687 260.447 42.2500 261.125 42.2500 261.906  c
42.2500 262.364 42.1588 262.786 41.9765 263.171  c
41.7942 263.557 41.5625 263.885 41.2812 264.156  c
41.0000 264.427 40.6875 264.640 40.3437 264.796  c
39.8645 265.036 39.3645 265.156 38.8437 265.156  c
38.3333 265.156 37.9609 265.067 37.7265 264.890  c
37.4921 264.713 37.3750 264.520 37.3750 264.312  c
37.3750 264.187 37.4244 264.080 37.5234 263.992  c
37.6224 263.903 37.7447 263.859 37.8906 263.859  c
37.9947 263.859 38.0885 263.875 38.1718 263.906  c
38.2552 263.937 38.3958 264.026 38.5937 264.171  c
38.9166 264.390 39.2395 264.500 39.5625 264.500  c
40.0625 264.500 40.4974 264.312 40.8671 263.937  c
41.2369 263.562 41.4218 263.104 41.4218 262.562  c
41.4218 262.041 41.2552 261.557 40.9218 261.109  c
40.5885 260.661 40.1302 260.312 39.5468 260.062  c
39.0781 259.875 38.4479 259.765 37.6562 259.734  c
39.3125 256.390 l
42.3906 256.390 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
44.0000 192.133 m
40.0000 192.133 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
36.4687 197.750 m
36.4687 196.770 36.6171 195.924 36.9140 195.210  c
37.2109 194.497 37.6041 193.968 38.0937 193.625  c
38.4791 193.354 38.8750 193.218 39.2812 193.218  c
39.9375 193.218 40.5260 193.552 41.0468 194.218  c
41.7031 195.052 42.0312 196.182 42.0312 197.609  c
42.0312 198.609 41.8880 199.458 41.6015 200.156  c
41.3151 200.854 40.9479 201.362 40.5000 201.679  c
40.0520 201.997 39.6250 202.156 39.2187 202.156  c
38.3958 202.156 37.7083 201.671 37.1562 200.703  c
36.6979 199.880 36.4687 198.895 36.4687 197.750  c
h
37.7187 197.906 m
37.7187 199.093 37.8645 200.062 38.1562 200.812  c
38.3958 201.437 38.7552 201.750 39.2343 201.750  c
39.4635 201.750 39.7005 201.648 39.9453 201.445  c
40.1901 201.242 40.3750 200.895 40.5000 200.406  c
40.6979 199.687 40.7968 198.661 40.7968 197.328  c
40.7968 196.349 40.6927 195.531 40.4843 194.875  c
40.3385 194.385 40.1406 194.041 39.8906 193.843  c
39.7239 193.708 39.5156 193.640 39.2656 193.640  c
38.9843 193.640 38.7291 193.765 38.5000 194.015  c
38.1979 194.369 37.9921 194.924 37.8828 195.679  c
37.7734 196.434 37.7187 197.177 37.7187 197.906  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
44.0000 129.011 m
40.0000 129.011 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
27.4687 134.750 m
27.4687 133.770 27.6171 132.924 27.9140 132.210  c
28.2109 131.497 28.6041 130.968 29.0937 130.625  c
29.4791 130.354 29.8750 130.218 30.2812 130.218  c
30.9375 130.218 31.5260 130.552 32.0468 131.218  c
32.7031 132.052 33.0312 133.182 33.0312 134.609  c
33.0312 135.609 32.8880 136.458 32.6015 137.156  c
32.3151 137.854 31.9479 138.362 31.5000 138.679  c
31.0520 138.997 30.6250 139.156 30.2187 139.156  c
29.3958 139.156 28.7083 138.671 28.1562 137.703  c
27.6979 136.880 27.4687 135.895 27.4687 134.750  c
h
28.7187 134.906 m
28.7187 136.093 28.8645 137.062 29.1562 137.812  c
29.3958 138.437 29.7552 138.750 30.2343 138.750  c
30.4635 138.750 30.7005 138.648 30.9453 138.445  c
31.1901 138.242 31.3750 137.895 31.5000 137.406  c
31.6979 136.687 31.7968 135.661 31.7968 134.328  c
31.7968 133.349 31.6927 132.531 31.4843 131.875  c
31.3385 131.385 31.1406 131.041 30.8906 130.843  c
30.7239 130.708 30.5156 130.640 30.2656 130.640  c
29.9843 130.640 29.7291 130.765 29.5000 131.015  c
29.1979 131.369 28.9921 131.924 28.8828 132.679  c
28.7734 133.434 28.7187 134.177 28.7187 134.906  c
h
35.1250 137.765 m
35.3229 137.765 35.4895 137.835 35.6250 137.976  c
35.7604 138.117 35.8281 138.281 35.8281 138.468  c
35.8281 138.666 35.7604 138.833 35.6250 138.968  c
35.4895 139.104 35.3229 139.171 35.1250 139.171  c
34.9270 139.171 34.7604 139.104 34.6250 138.968  c
34.4895 138.833 34.4218 138.666 34.4218 138.468  c
34.4218 138.270 34.4895 138.104 34.6250 137.968  c
34.7604 137.833 34.9270 137.765 35.1250 137.765  c
h
42.3906 130.390 m
41.8906 131.468 l
39.3125 131.468 l
38.7500 132.625 l
39.8645 132.791 40.7500 133.208 41.4062 133.875  c
41.9687 134.447 42.2500 135.125 42.2500 135.906  c
42.2500 136.364 42.1588 136.786 41.9765 137.171  c
41.7942 137.557 41.5625 137.885 41.2812 138.156  c
41.0000 138.427 40.6875 138.640 40.3437 138.796  c
39.8645 139.036 39.3645 139.156 38.8437 139.156  c
38.3333 139.156 37.9609 139.067 37.7265 138.890  c
37.4921 138.713 37.3750 138.520 37.3750 138.312  c
37.3750 138.187 37.4244 138.080 37.5234 137.992  c
37.6224 137.903 37.7447 137.859 37.8906 137.859  c
37.9947 137.859 38.0885 137.875 38.1718 137.906  c
38.2552 137.937 38.3958 138.026 38.5937 138.171  c
38.9166 138.390 39.2395 138.500 39.5625 138.500  c
40.0625 138.500 40.4974 138.312 40.8671 137.937  c
41.2369 137.562 41.4218 137.104 41.4218 136.562  c
41.4218 136.041 41.2552 135.557 40.9218 135.109  c
40.5885 134.661 40.1302 134.312 39.5468 134.062  c
39.0781 133.875 38.4479 133.765 37.6562 133.734  c
39.3125 130.390 l
42.3906 130.390 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
44.0000 65.8895 m
40.0000 65.8895 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
37.5312 67.2343 m
39.6250 66.2187 l
39.8281 66.2187 l
39.8281 73.4843 l
39.8281 73.9635 39.8489 74.2630 39.8906 74.3828  c
39.9322 74.5026 40.0156 74.5937 40.1406 74.6562  c
40.2656 74.7187 40.5208 74.7552 40.9062 74.7656  c
40.9062 75.0000 l
37.6718 75.0000 l
37.6718 74.7656 l
38.0781 74.7552 38.3411 74.7187 38.4609 74.6562  c
38.5807 74.5937 38.6640 74.5104 38.7109 74.4062  c
38.7578 74.3020 38.7812 73.9947 38.7812 73.4843  c
38.7812 68.8437 l
38.7812 68.2083 38.7604 67.8020 38.7187 67.6250  c
38.6875 67.4895 38.6328 67.3906 38.5546 67.3281  c
38.4765 67.2656 38.3802 67.2343 38.2656 67.2343  c
38.1093 67.2343 37.8958 67.3020 37.6250 67.4375  c
37.5312 67.2343 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
1.00000 w
2 J
0 j
Q
Q
cliprestore
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
